-- Criação de Tabelas

create table if not exists cliente (
    cpf varchar(11) primary key,
    nome varchar(100) not null,
    telefone varchar(20),
    email varchar(30) not null,
    endereco varchar(100) not null
);

create table if not exists concessionaria (
    cnpj varchar(14) primary key,
    nome varchar(100) not null,
    telefone varchar(20),
    endereco varchar(100) not null
);

create table if not exists vendedor (
    cpf varchar(11) primary key,
    nome varchar(100) not null,
    telefone varchar(20),
    email varchar(30) not null,
    cnpj_concessionaria varchar(14) not null,
    foreign key (cnpj_concessionaria) references concessionaria(cnpj) 
);

create table if not exists carro (
    placa varchar(7) primary key,
    marca varchar(20) not null,
    modelo varchar(20) not null,
    ano int not null,
    cor varchar(20) not null,
    quilometragem decimal(20, 2) not null,
    preco decimal(15, 2) not null,
    status varchar(20) not null,
    cnpj_concessionaria varchar(14) not null,
    foreign key (cnpj_concessionaria) references concessionaria(cnpj)
);

create table if not exists venda (
    cpf_cliente varchar(11),
    cpf_vendedor varchar(11),
    placa_carro varchar(7),
    cnpj_concessionaria varchar(14) not null,
    data date,
    valor decimal(20, 2) not null,
    tipo_pagamento varchar(20) not null,
    total_pago decimal(20, 2) not null,
    primary key (cpf_cliente, cpf_vendedor, placa_carro, cnpj_concessionaria, data),
    foreign key (cpf_cliente) references cliente(cpf) on delete cascade,
    foreign key (cpf_vendedor) references vendedor(cpf) on delete cascade,
    foreign key (placa_carro) references carro(placa) on delete cascade,
    foreign key (cnpj_concessionaria) references concessionaria(cnpj) on delete cascade
);

CREATE OR REPLACE TRIGGER TR_ATUALIZAR_STATUS_CARRO_APOS_VENDA
AFTER INSERT ON VENDA
FOR EACH ROW
BEGIN
    -- Atualiza o status do carro para 'Vendido' usando a placa do carro vendido
    UPDATE CARRO
    SET STATUS = 'Vendido'
    WHERE PLACA = :NEW.PLACA_CARRO;
END;
/

-- Tabela de auditoria para armazenar log de alteração de preço de um carro
CREATE TABLE LOG_PRECOS_CARRO (
    ID_LOG NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    PLACA_CARRO VARCHAR2(7) NOT NULL,
    PRECO_ANTIGO DECIMAL(15, 2),
    PRECO_NOVO DECIMAL(15, 2),
    DATA_ALTERACAO TIMESTAMP DEFAULT SYSTIMESTAMP,
    USUARIO_ALTERACAO VARCHAR2(100) DEFAULT USER 
);

CREATE OR REPLACE TRIGGER TR_REGISTRAR_LOG_ALTERACAO_PRECO_CARRO
AFTER UPDATE OF PRECO ON CARRO
FOR EACH ROW
WHEN (OLD.PRECO <> NEW.PRECO)
BEGIN
    INSERT INTO LOG_PRECOS_CARRO (PLACA_CARRO, PRECO_ANTIGO, PRECO_NOVO)
    VALUES (:OLD.PLACA, :OLD.PRECO, :NEW.PRECO);
END;
/

CREATE OR REPLACE TRIGGER TR_VERIFICAR_DISPONIBILIDADE_CARRO_ANTES_VENDA
BEFORE INSERT ON VENDA
FOR EACH ROW
DECLARE
    v_status_carro VARCHAR2(20);
BEGIN
    SELECT STATUS
    INTO v_status_carro
    FROM CARRO
    WHERE PLACA = :NEW.PLACA_CARRO;

    -- Apenas carros com status 'Disponível' podem ser vendidos
    IF v_status_carro <> 'Disponível' THEN
        RAISE_APPLICATION_ERROR(-20001, 'Não é possível vender um carro com status "' || v_status_carro || '". O carro deve estar "Disponível".');
    END IF;
END;
/

-- Coluna na tabela Vendedor para armazenar total de vendas 
ALTER TABLE VENDEDOR ADD (TOTAL_VENDAS NUMBER DEFAULT 0);

CREATE OR REPLACE TRIGGER TR_INCREMENTAR_NUMERO_VENDAS_VENDEDOR
AFTER INSERT ON VENDA
FOR EACH ROW
BEGIN
    -- Incrementa o total de vendas do vendedor associado à venda
    UPDATE VENDEDOR
    SET TOTAL_VENDAS = NVL(TOTAL_VENDAS, 0) + 1
    WHERE CPF = :NEW.CPF_VENDEDOR;
END;
/

CREATE OR REPLACE TRIGGER TR_VALIDAR_ANO_CARRO
BEFORE INSERT OR UPDATE ON CARRO
FOR EACH ROW
BEGIN
    IF :NEW.ANO < 1900 OR :NEW.ANO > EXTRACT(YEAR FROM SYSDATE) + 1 THEN
        RAISE_APPLICATION_ERROR(-20002, 'Ano de fabricação inválido (' || :NEW.ANO || '). Deve ser entre 1900 e o ano atual + 1.');
    END IF;
END;
/




